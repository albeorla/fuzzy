[tool.poetry]
name = "fuzzy-matcher"
version = "0.1.0"
description = "A flexible fuzzy string matching and entity resolution library"
authors = ["Albert Orlando <albertjorlando@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/aorlando/fuzzy"
keywords = ["fuzzy", "string matching", "entity resolution", "text", "nlp", "deduplication"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [{include = "fuzzy_matcher"}]

[tool.poetry.dependencies]
python = ">=3.8"
unidecode = ">=1.3.0"
jellyfish = ">=0.9.0"
# thefuzz with speedup extra which includes python-Levenshtein
thefuzz = {version = ">=0.19.0", extras = ["speedup"]}

[tool.poetry.group.dev.dependencies]
pytest = "^8.0"
pytest-cov = "^5.0"
pytest-xdist = "^3.5"
hypothesis = "^6.90"
freezegun = "^1.4"
mypy = "^1.9"
ruff = "^0.4.0"
types-freezegun = "*"

# Existing tool configurations
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "--cov=fuzzy_matcher --cov-report=term-missing --cov-report=xml:coverage.xml --cov-report=html:coverage_html -v"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["fuzzy_matcher"]
omit = ["*/__init__.py", "*/main.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "\\.\\.\\.",
]

[tool.ruff]
target-version = "py38"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "F",  # Pyflakes
    "W",  # pycodestyle warnings
    "B",  # flake8-bugbear
    "I",  # isort
    "UP", # pyupgrade
    "C90", # McCabe complexity
    "PT", # flake8-pytest-style
    "SIM",# flake8-simplify
    "TID",# flake8-tidy-imports
    "D",  # pydocstyle
]
ignore = [
    "D203",  # one-blank-line-before-class (conflicts with D211)
    "D212",  # multi-line-summary-first-line (conflicts with D213)
    "D213",  # multi-line-summary-second-line (conflicts with D212)
    "PT006",  # Wrong type passed to first argument of @pytest.mark.parametrize
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D100", "D103", "D104"]
"fuzzy_matcher/application/services.py" = ["C901"]
"tests/unit/test_hypothesis.py" = ["C901"]

[tool.ruff.format]
# Ruff formatting configuration
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "thefuzz.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.poetry.scripts]
# Main CLI entry points
fuzzy = "fuzzy_matcher.main:main"
demo = "fuzzy_matcher.main:run_demos"

# Development convenience commands
test = "scripts.cli:run_tests"
lint = "scripts.cli:run_lint"
format = "scripts.cli:run_format"
check = "scripts.cli:run_check_all"
help = "scripts.cli:list_commands"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
